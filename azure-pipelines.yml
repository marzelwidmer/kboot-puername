# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - /**

pool:
  vmImage: 'ubuntu-latest'

variables:
  SEMVER_SHORTSHA_BUILDID: $(GitVersion.SemVer)_$(GitVersion.ShortSha)_$(Build.BuildID)
  NAME: $(Build.DefinitionName)
  SONAR_ORGANIZATION: 'keepcalm'
  SONAR_CLOUD: 'azure-c3smonkey'
  SONAR_URL: 'https://sonarcloud.io'

  K8S_DEFAULT_IMAGE: 'c3smonkey/template:latest'
  K8S_DIR: 'k8s'
  DOCKER_REGISTRY: 'docker-registry.default.svc:5000'

stages:
  # SemVer
  - stage: StageVersion
    displayName: 'Semantic Version'
    variables:
      GIT_VERSION_CONFIGURATION: './ci/GitVersion.yml'
    jobs:
      - job: SemVer
        displayName: 'Semantic Version'
        steps:
          - task: UseGitVersion@5
            displayName: 'Semantic Version'
            inputs:
              versionSpec: '5.x'
              includePrerelease: true
              useConfigFile: true
              configFilePath: '$(GIT_VERSION_CONFIGURATION)'
          - bash: |
              mkdir -p $(Pipeline.Workspace)/variables
              echo "$(SEMVER_SHORTSHA_BUILDID)" > $(Pipeline.Workspace)/variables/VERSION
            displayName: 'Save Version'
            # Publish the folder as pipeline artifact
          - publish: $(Pipeline.Workspace)/variables
            artifact: variables

  # Tag only on master
  - stage: StageKustomize
    displayName: 'Kustomize'
    dependsOn: StageVersion
    jobs:
      - job: BuildKustomize
        pool:
          vmImage: 'ubuntu-latest'
        displayName: 'Kustomize Build'
        steps:
          # Download the artifacts
          - download: current
            artifact: variables
          # Read the variable from the file, then expose it in the job
          - bash: |
              VERSION=$(cat $(Pipeline.Workspace)/variables/VERSION)
              echo "##vso[task.setvariable variable=VERSION]$VERSION"
            displayName: 'Read variable and expose in the job.'

          - bash: |
              mkdir -p $(Pipeline.Workspace)/$K8S_DIR
              cd $K8S_DIR
              curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
              ./kustomize edit set image $K8S_DEFAULT_IMAGE $K8S_DEFAULT_IMAGE=$DOCKER_REGISTRY/$NAME:$VERSION
              ./kustomize build > $(Pipeline.Workspace)/$K8S_DIR/depl_$NAME_$VERSION.yaml

            displayName: 'Kustomize Build'
          # Publish the folder as pipeline artifact
          - publish: $(Pipeline.Workspace)/k8s
            artifact: k8s

  # Build
  - stage: StageBuild
    displayName: 'Build Artifact'
    dependsOn: StageVersion
    variables:
      GIT_VERSION_CONFIGURATION: './ci/GitVersion.yml'
      JDK_VERSION: '1.11'
      MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
      MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
    jobs:
      - job: Package
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          # Download the artifacts
          - download: current
            artifact: variables
          # Read the variable from the file, then expose it in the job
          - bash: |
              VERSION=$(cat $(Pipeline.Workspace)/variables/VERSION)
              echo "##vso[task.setvariable variable=VERSION]$VERSION"
            displayName: 'Read variable and expose in the job.'
          # Maven Cache
          - task: Cache@2
            displayName: Cache Maven local repo
            inputs:
              key: 'maven | "$(Agent.OS)" | **/pom.xml'
              restoreKeys: |
                maven | "$(Agent.OS)"
                maven
              path: $(MAVEN_CACHE_FOLDER)
          # Maven package
          - task: Maven@3
            displayName: Package
            inputs:
              mavenPomFile: 'pom.xml'
              mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '$(JDK_VERSION)'
              jdkArchitectureOption: 'x64'
              goals: 'clean package'
              options: '-Drevision=$(VERSION) -DskipTests'

  # Test
  - stage: StageTest
    displayName: 'Test Artifact'
    dependsOn: StageBuild
    variables:
      JDK_VERSION: '1.11'
      MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
      MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
    jobs:
      - job: Test
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          # Download the artifacts
          - download: current
            artifact: variables
          # Read the variable from the file, then expose it in the job
          - bash: |
              VERSION=$(cat $(Pipeline.Workspace)/variables/VERSION)
              echo "##vso[task.setvariable variable=VERSION]$VERSION"
            displayName: 'Read variable and expose in the job.'
          # Maven Cache
          - task: Cache@2
            displayName: Cache Maven local repo
            inputs:
              key: 'maven | "$(Agent.OS)" | **/pom.xml'
              restoreKeys: |
                maven | "$(Agent.OS)"
                maven
              path: $(MAVEN_CACHE_FOLDER)

          # Sonar
          - task: SonarCloudPrepare@1
            inputs:
              SonarCloud: '$(SONAR_CLOUD)'
              organization:  '$(SONAR_ORGANIZATION)'
              scannerMode: 'Other'

          # Maven package
          - task: Maven@3
            displayName: Test
            inputs:
              mavenPomFile: 'pom.xml'
              mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
              mavenVersionOption: 'Default'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '$(JDK_VERSION)'
              jdkArchitectureOption: 'x64'
              publishJUnitResults: true
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              codeCoverageToolOption: JaCoCo
              goals: 'verify sonar:sonar'
              options: '-Drevision=$(VERSION) -Dsonar.organization=$(SONAR_ORGANIZATION) -Dsonar.url=$(SONAR_URL)'


  # Dockerize
  - stage: StageDockerBuild
    displayName: 'Build Docker Image'
    dependsOn: StageTest
    variables:
      JDK_VERSION: '1.11'
      MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
      MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
    jobs:
      - job: BuildDockerImage
        pool:
          vmImage: 'ubuntu-latest'
        displayName: 'Build Docker Image'
        steps:
          # Download the artifacts
          - download: current
            artifact: variables
          # Read the variable from the file, then expose it in the job
          - bash: |
              VERSION=$(cat $(Pipeline.Workspace)/variables/VERSION)
              echo "##vso[task.setvariable variable=VERSION]$VERSION"
            displayName: 'Read variable and expose in the job.'
          # Maven Cache
          - task: Cache@2
            displayName: Cache Maven local repo
            inputs:
              key: 'maven | "$(Agent.OS)" | **/pom.xml'
              restoreKeys: |
                maven | "$(Agent.OS)"
                maven
              path: $(MAVEN_CACHE_FOLDER)

          # Maven create docker image
          - task: Maven@3
            displayName: Build Docker Iamge
            inputs:
              mavenPomFile: 'pom.xml'
              mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '$(JDK_VERSION)'
              jdkArchitectureOption: 'x64'
              goals: 'compile'
              options: '-DskipTests -Drevision=$(VERSION) -Pjib -Dimage=$(NAME):$(VERSION)'

  # Tag only on master
  - stage: StageTag
    displayName: 'Create Tag'
    condition: and(contains(variables['build.sourceBranch'], 'refs/heads/master'), succeeded())
    dependsOn: StageDockerBuild
    jobs:
      - job: BuildDockerImage
        pool:
          vmImage: 'ubuntu-latest'
        displayName: 'Tag Git'
        steps:
          # Download the artifacts
          - download: current
            artifact: variables
          # Read the variable from the file, then expose it in the job
          - bash: |
              VERSION=$(cat $(Pipeline.Workspace)/variables/VERSION)
              echo "##vso[task.setvariable variable=VERSION]$VERSION"
            displayName: 'Read variable and expose in the job.'
          - task: git-tag-on-release-task@9
            condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
            displayName: "Add Tag to git"
            inputs:
              staticTagName: "$(VERSION)"









